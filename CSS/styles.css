/*
The CSS :root pseudo-class selector is used to select the highest-level 
parent of a given specification. In the HTML specification, the :root is
 essentially equivalent to the html selector
 */

/*
 Color Palette
-Primary
-Secondary
-Accent
*/
:root {
  --color-primary: #2584ff;
  --color-secondary: #00d9ff;
  --color-accent: #ff3400;
  --color-headings: #1b0760;
  --color-body: #918ca4;
  --color-body-darker: #5c5577;
  --color-border: #ccc;
  --border-radius: 30px;
}

/*grab all element, as well as elements that are dynamically inserted after or before them
The ::after selector inserts something after the content of each selected element(s).
Use the ::before selector to insert something before the content.
*/
*,
*::after,
*::before {
  /*Set the "universal box-sizing":*/
  box-sizing: border-box;
}

/* Typography*/
/*by default it is going to be 16px. This is set by the browser*/
html {
  /* 62.5% * 16px = 10px, change the default font-size to 10px*/
  font-size: 62.5%;
}

body {
  font-family: Inter, Arial, Helvetica, sans-serif;
  font-size: 2.4rem; /*default font-size is 2.4 rem which is 24px*/
  line-height: 1.5; /*this mean one and half times the current font size*/
  color: var(--color-body);
}

h1,
h2,
h3 {
  color: var(--color-headings);
  margin-bottom: 1rem;
}

h1 {
  /* 1 X font size of the htmk element
    "1 rem = 16px"

    in this case 1 rem = 10px. because in the html element we set the font-size to 62.5%
  */
  font-size: 7rem;
}

h2 {
  /*Reason why not using the px instead of using rem is because pixels are absolute unites. They are
    not flexible. So if the user change the default font size in their browser, our webpage is not going to 
    reflect that change.
    */
  font-size: 4rem;
}

h3 {
  font-size: 3rem;
}

p {
  /*
    "Margin collapsing"
    Previsouly, the margin below the heading and the margin above the paragraph are collapsed into 24px.
    This way, we let the heading decide the margin above the paragraph
    */
  margin-top: 0;
}

/*a media query for screens that are larger than 1024 pixels. This is kind of a standard breakpoint that 
a lot frameworks like bootstrap and tailwind IOS
*/
@media screen and (min-width: 1024px) {
  body {
    font-size: 1.8rem;
  }

  h1 {
    font-size: 8rem;
  }

  h2 {
    font-size: 4rem;
  }

  h3 {
    font-size: 2.4rem;
  }
}

/*----------------------------------------------------------------------------------------------------------------------------------------*/
/* Links */
a {
  text-decoration: none;
}
.link-arrow {
  color: var(--color-accent);
  text-transform: uppercase;
  font-size: 2rem;
  font-weight: bold;
}

/*to make a arrow after the link, to implement that, we are going to use the after pseudo element selector. */
.link-arrow::after {
  content: "-->";

  /*reason why set 5px here, because we want this 
  space to always be the same, no matter how large the font as we just 
  want to have a tiny bit of space before the arrow.
  */
  margin-left: 5px;

  /*apply a transition and make this smooth.
    the margin property that we are animating.
  */
  transition: margin 0.15s;
}

/*with this rule, we are essentially targeting the element that we dynamically insert  "content: '-->' ";, but in the hover state*/
.link-arrow:hover::after {
  margin-left: 10px;
}

/*this is a better way approach to define every media query close to each component.
If we put every media query at the end of the css file. So every time we want to change something, we need to jump up and down for 
adjusting the styles for mobile and desktop.
*/
@media screen and (min-width: 1024px) {
  .link-arrow {
    font-size: 1.5rem;
  }
}

/*------------------------------------------------------------------------------------------------------------------------------------------------------*/
/*Badges */
/*first we are going to create a normal badge*/
.badge {
  border-radius: 20px;

  /*0.5 rem for vertical padding and two rem for horizontal padding*/
  padding: 0.5rem 2rem;

  /*since we add the font from goolge font. we changed the default font-weight. And we can choose the font-weight that we want.
  in this case. 
  */
  font-weight: 600;

  /*This prevetns badge from wrapping into a second line*/
  white-space: nowrap;
  font-size: 2rem;
}

/*using two hyphens, we separate a block or a component from a modifier, like primary 
  this is the primary badge*/
.badge--primary {
  background-color: var(--color-primary);
  color: #fff;
}

.badge--secondary {
  background-color: var(--color-secondary);
  color: #fff;
}

.badge--small {
  font-size: 1.6rem;
  padding: 0.5rem 1.5rem;
}

@media screen and (min-width: 1024px) {
  .badge {
    font-size: 1.5rem;
  }

  .badge--small {
    font-size: 1.2rem;
  }
}

/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
/* Lists */
.list {
  list-style: none;

  /*get rid of the left padding that all browser apply by default.*/
  padding-left: 0;
  color: var(--color-headings);
}

.list--inline .list__item {
  display: inline-block;
  margin-right: 2rem;
}

.list--tick {
  list-style-image: url(../images/tick.svg);

  /*the icon won't show if we don't set the padding-left here, because we set the padding-left to 0 previously*/
  padding-left: 3rem;
}

/*for lists with a tick skin. our items should have the following attribute*/
.list--tick .list__item {
  padding-left: 0.5rem;
  margin-bottom: 1rem;
}

@media screen and (min-width: 1024px) {
  .list--tick .list__item {
    padding-left: 0;
  }
}

/*------------------------------------------------------------------------------------------------------------------------------------------*/
/* Icons*/
.icon {
  width: 40px;
  height: 40px;
}

.icon--primary {
  /*use fill propertity to applies to SVG images.*/
  fill: var(--color-primary);
}

/*using single hyphen here. because this is not a variation, or a modifier for the icon class. This is an entirely new class. use single hyphen to separate multiple words*/
.icon-container {
  background: #f3f9fa;

  /*using px value here, because our icon always the same size. The don't change relative to the screen or the font size.that is why using an absolute unit here.
    width and height properties have no effect on inline elements. span is a inline element
  */
  width: 64px;
  height: 64px;
  border-radius: 100%;
  display: inline-flex;
  /*justify content for aligning along the horizontal axis*/
  justify-content: center;
  /*align-item for aligning along the vertical axis*/
  align-items: center;
}

/*----------------------------------------------------------------------------------------------------------------------------*/
/* Button */
.btn {
  border-radius: 40px;
  border: 0;

  /*have the same pointer when we hover our mouse over the button element*/
  cursor: pointer;
  font-size: 1.8rem;
  font-weight: 600;
  margin: 1rem 0;
  padding: 2rem 3rem;
  text-align: center;
  text-transform: uppercase;
  white-space: nowrap;
}

.btn--primary {
  background: var(--color-primary);
  color: #fff;
}

.btn--primary:hover {
  background: #3a8ffd;
}

.btn--secondary {
  background: var(--color-secondary);
  color: #fff;
}

.btn--secondary:hover {
  background: #00c8eb;
}

.btn--accent {
  background: var(--color-accent);
  color: #fff;
}

.btn--accent:hover {
  background: #ec3000;
}

.btn--outline {
  background: #fff;
  color: var(--color-headings);
  border: 2px solid var(--color-headings);
}

.btn--outline:hover {
  background: var(--color-headings);
  color: #fff;
}

.btn--block {
  width: 100%;
  /*anchor element is inline by default. if you give them a width, that is not gonna work.
  so use the inline-block, to make the button show as block
  */
  display: inline-block;
}

@media screen and (min-width: 1024px) {
  .btn {
    font-size: 1.5rem;
  }
}

/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
/* Input*/
.input {
  border-radius: var(--border-radius);
  border: 1px solid var(--color-border);
  color: var(--color-headings);
  font-size: 2rem;
  outline: 0;
  padding: 1.5rem 3.5rem;
}

/*change the color of the palceholder*/
::placeholder {
  color: #cdcbd7;
}

/*this is a container for input field and button */
.input-group {
  border: 1px solid var(--color-border);
  border-radius: var(--border-radius);

  /*to push the button to the right, we want to make this input field grow and take up all the available space
  input component is a flex item*/
  display: flex;
}

/*this mean the input class inside the input-group class will be have the following css style*/
.input-group .input {
  border: 0;

  /*this will make this input field grow to take up all the available space*/
  /*The flex-grow property specifies how much the item will grow relative to 
  the rest of the flexible items inside the same container.*/
  /*A number specifying how much the item will grow relative to the rest of the
   flexible items. Default value is 0*/
  flex-grow: 1;
  padding: 1.5rem 1rem;
}

.input-group .btn {
  /*using an absolute value here, because we don't want the margin to be dependent on the font size or the 
  viewport size. always want to have four pixels of margin.*/
  margin: 4px;
}

@media screen and (min-width: 1024px) {
  .input {
    font-size: 1.5rem;
  }
}

/*---------------------------------------------------------------------------------------------------------------------
/* Card */
.card {
  border-radius: 7px;
  box-shadow: 0 0 20px 10px #f3f3f3;
  /*reason why using overflow here, because the backgroud color, the header has grown larger than its 
  parent and is container which is the card element. so have the overflow problem. As you know by default overflow is visible.*/
  overflow: hidden;
}

.card__header,
.card__body {
  padding: 2rem 3rem;
}

.card--primary .card__header {
  background: var(--color-primary);
  color: #fff;
}

.card--secondary .card__header {
  background: var(--color-secondary);
  color: #fff;
}

.card--secondary .badge--secondary {
  background: #02cdf1;
}

/*--------------------------------------------------------------------------------------------------------------------*/
/* Plan */
.plan__name {
  color: #fff;
  margin: 0;
  font-weight: 500;
  font-size: 2.4rem;
}

.plan__price {
  font-size: 6rem;
}

.plan__billing-cycle {
  font-size: 2.4rem;
  font-weight: 300;
  opacity: 0.8;
  margin-right: 1rem;
}

.plan__description {
  font-size: 2rem;
  font-weight: 300;
  letter-spacing: 1px;
  display: block;
}

.plan .list__item {
  margin-bottom: 2rem;
}

/*如果不把这里的设置为relative， .plan--popular .card__header::before 里的absolute就以整个html作为relative */
.plan--popular .card__header {
  position: relative;
}

/*using pseudo element selectors.So using the before selector, we want to insert an image
 before the content of the header element.  */
.plan--popular .card__header::before {
  content: url(../images/popular.svg);
  width: 40px;

  /*because it is a inline element, to make the width works, we need to add display: inline-block*/
  display: inline-block;

  /*this mean we should make the parent or the container, a relatively position element. parent is the .card__header*/
  position: absolute;
  top: -6px;
  right: 5%;
}

@media screen and (min-width: 1024px) {
  .plan__name {
    font-size: 1.4rem;
  }

  .plan__price {
    font-size: 5rem;
  }

  .plan__billing-cycle {
    font-size: 1.6rem;
  }

  .plan__description {
    font-size: 1.7rem;
  }
}

/*--------------------------------------------------------------------------------------------------------------------*/
/* Meida */
.media {
  /*flex	Displays an element as a block-level flex container*/
  /*if we use flex on the container, we can lay the element horizontally*/
  display: flex;
}

.media__title {
  margin-top: 0;
}

.media__body {
  margin: 0 2rem;
}

.media__image {
  margin-top: 1rem;
}

/*--------------------------------------------------------------------------------------------------------------------*/
/* quotes */
.quote {
  font-size: 3rem;
  font-style: italic;
  color: var(--color-body-darker);
  line-height: 1.3;
}

.quote__text::before {
  content: open-quote;
}

.quote__text::after {
  content: close-quote;
}

.quote__author {
  font-size: 3rem;
  font-weight: 500;
  font-style: normal;
  margin-bottom: 0;
}

.quote__organization {
  color: var(--color-headings);
  opacity: 0.4;
  font-size: 2rem;
  font-style: normal;
}

/*position this element relative to itself without effecting other elements*/
.quote__line {
  position: relative;
  bottom: 10px;
}

@media screen and (min-width: 1024px) {
  .quote {
    font-size: 2rem;
  }

  .quote__author {
    font-size: 2.4rem;
  }

  .quote__organization {
    font-size: 1.6rem;
  }
}

/*--------------------------------------------------------------------------------------------------------------------*/
/* Grid */
.grid {
  display: grid;
}

/*this is kind of standard breakpoint that a lot of framework like bootstrap use.*/
@media screen and (min-width: 768px) {
  .grid--1x2 {
    /*so we are going to take all the available space divided by two,and then give each column one slice.*/
    grid-template-columns: repeat(2, 1fr);
  }
}

@media screen and (min-width: 1024px) {
  .grid--1x3 {
    grid-template-columns: repeat(3, 1fr);
  }
}
